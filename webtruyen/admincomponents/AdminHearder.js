import React, {useEffect, useState} from 'react';
import {View, Text, TextInput, TouchableOpacity, StyleSheet, Alert} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import AsyncStorage from "@react-native-async-storage/async-storage";
import {useNavigation} from "@react-navigation/native";

const AdminHeader = ({  onSearch }) => {
  const [userData, setUserData] = useState(null);
  const [userName, setUserName] = useState('');
  const [searchText, setSearchText] = React.useState('');
  const navigation = useNavigation();
  useEffect(() => {
    // H√†m l·∫•y d·ªØ li·ªáu user t·ª´ AsyncStorage
    const getUserData = async () => {
      try {
        const storedUserData = await AsyncStorage.getItem('userData');
        if (storedUserData) {
          const parsedUserData = JSON.parse(storedUserData);
          setUserData(parsedUserData);
          setUserName(parsedUserData.username);
        }
      } catch (error) {
        console.error('L·ªói khi l·∫•y d·ªØ li·ªáu user:', error);
      }
    };

    getUserData();
  }, []);
  const onProfilePress=()=>{
    navigation.navigate('Profile', { userData });
  }
  const handleLogout = async () => {
    try {
      // Hi·ªÉn th·ªã alert x√°c nh·∫≠n ƒëƒÉng xu·∫•t
      Alert.alert(
          "X√°c nh·∫≠n",
          "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒëƒÉng xu·∫•t?",
          [
            {
              text: "H·ªßy",
              style: "cancel"
            },
            {
              text: "ƒêƒÉng xu·∫•t",
              onPress: async () => {
                try {
                  // X√≥a t·∫•t c·∫£ d·ªØ li·ªáu ng∆∞·ªùi d√πng kh·ªèi AsyncStorage
                  await AsyncStorage.multiRemove([
                    'userData',
                    // Th√™m c√°c key kh√°c n·∫øu c·∫ßn
                  ]);

                  // Reset state
                  setUserData(null);
                  setUserName('');

                  // Chuy·ªÉn h∆∞·ªõng v·ªÅ m√†n h√¨nh ƒëƒÉng nh·∫≠p
                  navigation.reset({
                    index: 0,
                    routes: [{ name: 'Login' }],
                  });

                  // Th√¥ng b√°o ƒëƒÉng xu·∫•t th√†nh c√¥ng
                  Alert.alert('Th√¥ng b√°o', 'ƒêƒÉng xu·∫•t th√†nh c√¥ng');

                } catch (error) {
                  console.error('L·ªói khi ƒëƒÉng xu·∫•t:', error);
                  Alert.alert(
                      'L·ªói',
                      'C√≥ l·ªói x·∫£y ra khi ƒëƒÉng xu·∫•t. Vui l√≤ng th·ª≠ l·∫°i!'
                  );
                }
              },
              style: "destructive"
            }
          ]
      );
    } catch (error) {
      console.error('L·ªói:', error);
      Alert.alert('L·ªói', 'ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën');
    }
  };



  return (
      <View style={styles.container}>
        {/* Thanh tr√™n c√πng */}
        <View style={styles.topSection}>
          <Text style={styles.title}>üìö M√™ Truy·ªán</Text>

          <View style={styles.iconsRight}>
            <TouchableOpacity onPress={onProfilePress} style={styles.profileButton}>
              <Ionicons name="person-circle" size={22} color="#fff" />
              <Text style={styles.username}>{userName}</Text>
            </TouchableOpacity>

            <TouchableOpacity onPress={handleLogout} style={styles.logoutButton}>
              <Ionicons name="log-out" size={18} color="#fff" />
            </TouchableOpacity>
          </View>
        </View>
      </View>
  );
};

const styles = StyleSheet.create({
  container: {
    backgroundColor: '#1c1c1e',
    paddingBottom: 4,
  },
  topSection: {
    paddingHorizontal: 10,
    paddingTop: 12,
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  title: {
    color: '#fff',
    fontWeight: 'bold',
    fontSize: 20,
  },
  iconsRight: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
  },
  profileButton: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  username: {
    color: '#fff',
    marginLeft: 6,
    fontSize: 14,
  },
  logoutButton: {
    backgroundColor: '#f44',
    borderRadius: 6,
    padding: 6,
  },

  navTabs: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    paddingVertical: 8,
    backgroundColor: '#1c1c1e',
  },
  tab: {
    color: '#fff',
    fontSize: 14,
    fontWeight: '500',
  },
});

export default AdminHeader;